"use strict";
// const { ErrorReporting } = require('@google-cloud/error-reporting');
// const ErrorResponse = require('../utils/errorResponse');
// // Sample Error
// //  ['Message to send to the client, response code, log to stack driver (true/flase),
// // logg another message other then what is sent to the user ]
// // new ErrorResponse('Vendrix Card Interaction Fail',500,true,err)
// const errorHandler = async (err, req, res, next) => {
//   let error = { ...err };
//   const gcpErrors = new ErrorReporting({
//     projectId: process.env.PROJECT_ID,
//     reportMode: 'always',
//   });
//   let userEmail;
//   if (!req.user) {
//     userEmail = 'Unauthorized User';
//   } else {
//     userEmail = req.user[process.env.AUTH0_JWT_USEREMAIL];
//   }
//   error.message = err.message;
//   // Check to Log to GCP Stack Driver
//   if (err.logToGcp) {
//     // Log to GCP & Return generic error message to user
//     const errorEvent = gcpErrors.event();
//     errorEvent.setUser(userEmail);
//     errorEvent.setServiceContext(process.env.ENGINE, process.env.VERSION);
//     errorEvent.setMessage(err.message);
//     errorEvent.setHttpMethod(req.method);
//     errorEvent.setUrl(req.originalUrl);
//     errorEvent.setFunctionName(err.logMessage.message);
//     errorEvent.setUserAgent(req.header('user-agent'));
//     errorEvent.setReferrer(req.headers.referer);
//     errorEvent.setResponseStatusCode(err.statusCode || 500);
//     // Set the stack trace to the original error or it will
//     // show the error being generated here
//     errorEvent._autoGeneratedStackTrace = err.stack;
//     gcpErrors.report(errorEvent, () => {
//       console.log('Done reporting error event!');
//     });
//   } else if (err.logToGcp === undefined) {
//     const errorEvent = gcpErrors.event();
//     errorEvent.setUser(userEmail);
//     errorEvent.setServiceContext(process.env.ENGINE, process.env.VERSION);
//     errorEvent.setMessage(err.message);
//     errorEvent.setHttpMethod(req.method);
//     errorEvent.setUrl(req.originalUrl);
//     errorEvent.setFunctionName(err.message);
//     errorEvent.setUserAgent(req.header('user-agent'));
//     errorEvent.setReferrer(req.headers.referer);
//     errorEvent.setResponseStatusCode(err.statusCode || 500);
//     // Set the stack trace to the original error or it will
//     // show the error being generated here
//     errorEvent._autoGeneratedStackTrace = err.stack;
//     gcpErrors.report(errorEvent);
//   }
//   // Log to console for dev
//   //console.log(err.stack);
//   // Mongoose bad ObjectId
//   if (err.name === 'CastError') {
//     // Start GCP Log
//     const errorEvent = gcpErrors.event();
//     errorEvent.setUser(userEmail);
//     errorEvent.setServiceContext(process.env.ENGINE, process.env.VERSION);
//     errorEvent.setMessage(err.message);
//     errorEvent.setHttpMethod(req.method);
//     errorEvent.setUrl(req.originalUrl);
//     errorEvent.setFunctionName(err.logMessage.message);
//     errorEvent.setUserAgent(req.header('user-agent'));
//     errorEvent.setReferrer(req.headers.referer);
//     errorEvent.setResponseStatusCode(err.statusCode || 500);
//     // Set the stack trace to the original error or it will
//     // show the error being generated here
//     errorEvent._autoGeneratedStackTrace = err.stack;
//     gcpErrors.report(errorEvent);
//     // END GCP Log
//     const message = `Resource not found`;
//     error = new ErrorResponse(message, 404);
//   }
//   // Mongoose duplicate key
//   if (err.code === 11000) {
//     const message = 'Duplicate field value entered';
//     let errMessage = '';
//     if (err.logMessage && err.logMessage.message) {
//       errMessage = err.logMessage.message;
//     } else {
//       errMessage = err.message;
//     }
//     // Start GCP Log
//     const errorEvent = gcpErrors.event();
//     errorEvent.setUser(userEmail);
//     errorEvent.setServiceContext(process.env.ENGINE, process.env.VERSION);
//     errorEvent.setMessage(message);
//     errorEvent.setHttpMethod(req.method);
//     errorEvent.setUrl(req.originalUrl);
//     errorEvent.setFunctionName(errMessage);
//     errorEvent.setUserAgent(req.header('user-agent'));
//     errorEvent.setReferrer(req.headers.referer);
//     errorEvent.setResponseStatusCode(err.statusCode || 500);
//     // Set the stack trace to the original error or it will
//     // show the error being generated here
//     errorEvent._autoGeneratedStackTrace = err.stack;
//     gcpErrors.report(errorEvent);
//     // END GCP Log
//     error = new ErrorResponse(message, 400);
//   }
//   // Mongoose validation error
//   if (err.name === 'ValidationError') {
//     const message = Object.values(err.errors).map((val) => val.message);
//     // Start GCP Log
//     const errorEvent = gcpErrors.event();
//     errorEvent.setUser(userEmail);
//     errorEvent.setServiceContext(process.env.ENGINE, process.env.VERSION);
//     errorEvent.setMessage(message);
//     errorEvent.setHttpMethod(req.method);
//     errorEvent.setUrl(req.originalUrl);
//     errorEvent.setFunctionName(err.logMessage.message);
//     errorEvent.setUserAgent(req.header('user-agent'));
//     errorEvent.setReferrer(req.headers.referer);
//     errorEvent.setResponseStatusCode(err.statusCode || 500);
//     // Set the stack trace to the original error or it will
//     // show the error being generated here
//     errorEvent._autoGeneratedStackTrace = err.stack;
//     gcpErrors.report(errorEvent);
//     // END GCP Log
//     error = new ErrorResponse(message, 400);
//   }
//   res.status(error.statusCode || 500).json({
//     success: false,
//     error: error.message || 'Server Error',
//   });
// };
// module.exports = errorHandler;
//# sourceMappingURL=error.js.map